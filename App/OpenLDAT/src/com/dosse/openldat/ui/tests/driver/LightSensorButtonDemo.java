/*
 * Copyright (C) 2021 Federico Dossena
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.dosse.openldat.ui.tests.driver;

import com.dosse.openldat.device.Device;
import com.dosse.openldat.device.callbacks.LightSensorButtonCallback;
import com.dosse.openldat.processing.buffers.CircularBuffer;
import com.dosse.openldat.ui.chart.Channel;
import com.dosse.openldat.ui.chart.Chart;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author dosse
 */
public class LightSensorButtonDemo extends javax.swing.JFrame {

    private Device device;
    private Timer repaintTimer = null;

    /**
     * Creates new form LightSensorDemo
     */
    public LightSensorButtonDemo(Device device, boolean noBuffer, byte sensitivity, boolean fastADC, boolean noClick, boolean autoFire, int windowSize) {
        try {
            initComponents();
            this.device = device;
            CircularBuffer light = new CircularBuffer(windowSize), click = new CircularBuffer(windowSize);
            double sampleRate = device.lightSensorButtonMode(noBuffer, sensitivity, fastADC, noClick, autoFire, new LightSensorButtonCallback() {
                @Override
                public void onDataBufferReceived(int[] l, int[] c) {
                    light.add(l);
                    click.add(c);
                }

                @Override
                public void onDataSampleReceived(int l, int c) {
                    light.add(l);
                    click.add(c);
                }

                @Override
                public void onError(Exception e) {
                    super.onError(e);
                    System.exit(2);
                }

            });
            Channel chLight = new Channel(light, 0, 1023, new Color(192, 192, 192)),
                    chClick = new Channel(click, 0, 1, new Color(96, 128, 255));
            Chart graph = new Chart();
            graph.addChannel(chLight);
            graph.addChannel(chClick);
            getContentPane().add(graph);
            Color graphBackground = graph.BACKGROUND;
            graph.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    graph.BACKGROUND = new Color(255, 255, 255);
                    Timer t = new Timer(200, new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent ae) {
                            graph.BACKGROUND = graphBackground;
                        }
                    });
                    t.setRepeats(false);
                    t.start();
                }
            });
            setVisible(true);
            repaintTimer = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    graph.repaint();
                }
            });
            repaintTimer.setRepeats(true);
            repaintTimer.start();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), getTitle(), JOptionPane.ERROR_MESSAGE);
            formWindowClosing(null);
            dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OpenLDAT Driver Test - Light Sensor + Button/AF");
        setMinimumSize(new java.awt.Dimension(320, 180));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        repaintTimer.stop();
        device.endCurrentActivity();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
