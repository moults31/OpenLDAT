/*
 * Copyright (C) 2021 Federico Dossena
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.dosse.openldat.ui.tests.driver;

import com.dosse.openldat.Utils;
import com.dosse.openldat.processing.buffers.ArrayBuffer;
import com.dosse.openldat.processing.filters.PeakHoldFilter;
import com.dosse.openldat.processing.filters.RunningAverageSmoothingFilter;
import com.dosse.openldat.ui.chart.Channel;
import com.dosse.openldat.ui.chart.Chart;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author dosse
 */
public class DumpViewer extends javax.swing.JFrame {

    /**
     * Creates new form DumpViewer
     */
    public DumpViewer() {
        initComponents();
        float DPI_SCALE = Utils.getDPIScaling();
        setSize((int) (getPreferredSize().width * DPI_SCALE), (int) (getPreferredSize().height * DPI_SCALE));
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OpenLDAT - Dump Viewer");

        jButton1.setText("Load dump");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("This tools turns light dumps into PNG files with a chart.");

        jButton2.setText("Render and save");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("No file selected");

        jLabel3.setText(" ");

        jLabel4.setText("The output image will have 1 horizontal pixel per sample");

        jLabel5.setText("Filter");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Raw", "Smoothen", "PeakHold" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addGap(0, 84, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private double sampleRate;
    private int[] samples;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser c = new JFileChooser();
        c.setMultiSelectionEnabled(false);
        c.setFileSelectionMode(JFileChooser.FILES_ONLY);
        c.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getName().toLowerCase().endsWith(".raw");
            }

            @Override
            public String getDescription() {
                return "Light Dump file (*.raw)";
            }
        });
        if (c.showOpenDialog(rootPane) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File f = c.getSelectedFile();
        if (f == null) {
            return;
        }
        new Thread() {
            @Override
            public void run() {
                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jComboBox1.setEnabled(false);
                jLabel2.setText("Loading...");
                try {
                    DataInputStream dis = new DataInputStream(new FileInputStream(f));
                    sampleRate = dis.readDouble();
                    samples = new int[(int) ((f.length() - 8) / 4)];
                    for (int i = 0; i < samples.length; i++) {
                        samples[i] = dis.readInt();
                    }
                    dis.close();
                    jButton2.setEnabled(true);
                    jLabel2.setText("Loaded, " + String.format("%.1f", sampleRate) + " Hz");
                } catch (Throwable ex) {
                    jLabel2.setText("Loading failed");
                }
                jButton1.setEnabled(true);
                jButton2.setEnabled(true);
                jComboBox1.setEnabled(true);
            }
        }.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser c = new JFileChooser();
        c.setFileSelectionMode(JFileChooser.FILES_ONLY);
        c.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getName().toLowerCase().endsWith(".png");
            }

            @Override
            public String getDescription() {
                return "PNG images (*.png)";
            }
        });
        if (c.showSaveDialog(rootPane) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File f = c.getSelectedFile();
        if (f == null) {
            return;
        }
        if (!f.getName().toLowerCase().endsWith(".png")) {
            f = new File(f.getAbsolutePath() + ".png");
        }
        File outfile = f;
        new Thread() {
            @Override
            public void run() {
                try {
                    jButton1.setEnabled(false);
                    jButton2.setEnabled(false);
                    jComboBox1.setEnabled(false);
                    jLabel3.setText("Filtering...");
                    int[] filtered = new int[samples.length];
                    if (jComboBox1.getSelectedIndex() == 0) {
                        filtered = samples;
                    }
                    if (jComboBox1.getSelectedIndex() == 1) {
                        RunningAverageSmoothingFilter f = new RunningAverageSmoothingFilter(samples.length, sampleRate > 14000 ? 0.996 : 0.99);
                        f.add(samples);
                        filtered = f.getData();
                    }
                    if (jComboBox1.getSelectedIndex() == 2) {
                        PeakHoldFilter f = new PeakHoldFilter(samples.length, (int) (sampleRate * 0.0085));
                        f.add(samples);
                        filtered = f.getData();
                    }
                    jLabel3.setText("Rendering...");
                    Chart chart1 = new Chart();
                    chart1.setSize(new Dimension(samples.length, 1024));
                    Channel ch = new Channel(new ArrayBuffer(filtered), 0, 1023, new Color(255, 255, 255));
                    chart1.addChannel(ch);
                    BufferedImage bi = new BufferedImage(chart1.getWidth(), chart1.getHeight(), BufferedImage.TYPE_INT_RGB);
                    Graphics2D tempg = bi.createGraphics();
                    chart1.paint(tempg);
                    jLabel3.setText("Compressing file...");
                    ImageIO.write(bi, "png", outfile);
                    tempg.dispose();
                    jLabel3.setText("Done");
                } catch (Throwable ex) {
                    jLabel3.setText("Failed");
                }
                jButton1.setEnabled(true);
                jButton2.setEnabled(true);
                jComboBox1.setEnabled(true);
            }
        }.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
