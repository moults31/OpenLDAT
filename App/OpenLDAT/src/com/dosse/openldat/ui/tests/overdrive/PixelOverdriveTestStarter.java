/*
 * Copyright (C) 2021 Federico Dossena
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.dosse.openldat.ui.tests.overdrive;

import com.dosse.openldat.Utils;
import com.dosse.openldat.device.Device;
import com.dosse.openldat.tests.TestException;
import com.dosse.openldat.tests.overdrive.PixelOverdriveTest;
import com.dosse.openldat.ui.errordialog.ErrorDialog;
import java.awt.Component;
import java.awt.Container;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.util.Map;

/**
 *
 * @author dosse
 */
public abstract class PixelOverdriveTestStarter extends javax.swing.JFrame {

    private final Device d;

    /**
     * Creates new form PixelResponseTestStarter
     */
    public PixelOverdriveTestStarter(Device d) {
        this.d = d;
        initComponents();
        setFocusTraversalPolicy(new FocusTraversalPolicy() {
            @Override
            public Component getComponentAfter(Container cntnr, Component cmpnt) {
                if (cmpnt == jComboBox1) {
                    return jComboBox2;
                }
                if (cmpnt == jComboBox2) {
                    return jCheckBox1;
                }
                if (cmpnt == jCheckBox1) {
                    return jButton1;
                }
                if (cmpnt == jButton1) {
                    return jComboBox1;
                }
                return null;
            }

            @Override
            public Component getComponentBefore(Container cntnr, Component cmpnt) {
                if (cmpnt == jComboBox1) {
                    return jButton1;
                }
                if (cmpnt == jComboBox2) {
                    return jComboBox1;
                }
                if (cmpnt == jCheckBox1) {
                    return jComboBox2;
                }
                if (cmpnt == jButton1) {
                    return jCheckBox1;
                }
                return null;
            }

            @Override
            public Component getFirstComponent(Container cntnr) {
                return jComboBox1;
            }

            @Override
            public Component getLastComponent(Container cntnr) {
                return jButton1;
            }

            @Override
            public Component getDefaultComponent(Container cntnr) {
                return jButton1;
            }
        });
        jButton1.requestFocus();
        float DPI_SCALE = Utils.getDPIScaling();
        setSize((int) (getPreferredSize().width * DPI_SCALE), (int) (getPreferredSize().height * DPI_SCALE));
        setLocationRelativeTo(null);
        setMinimumSize(getSize());
        setIconImage(Utils.loadAndScaleIcon("/com/dosse/openldat/ui/icon.png", (int) (128 * DPI_SCALE), (int) (128 * DPI_SCALE)).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pixel Overdrive Test - Configuration");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton1.setText("Run test");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Step size");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "16 (Slow)", "32 (Normal)", "64 (Fast)" }));
        jComboBox2.setSelectedIndex(1);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Skip transitions to 0 and 255");

        jLabel1.setText("Evaluation method");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Relative", "Absolute" }));
        jComboBox1.setSelectedIndex(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 314, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
        int step = 32;
        switch (jComboBox2.getSelectedIndex()) {
            case 0:
                step = 16;
                break;
            case 1:
                step = 32;
                break;
            case 2:
                step = 64;
                break;
        }
        boolean skipTo0And255 = jCheckBox1.isSelected();
        int method = jComboBox1.getSelectedIndex();
        String methodString = (String) jComboBox1.getSelectedItem();
        PixelOverdriveTest test = new PixelOverdriveTest(d, step, skipTo0And255, method) {
            @Override
            public void onDone(Map results) {
                boolean flickeringDetected = (boolean) results.get("flickeringDetected");
                int[] steps = (int[]) results.get("steps");
                double[][] percent = new double[steps.length][steps.length];
                for (int y = 0; y < steps.length; y++) {
                    for (int x = 0; x < steps.length; x++) {
                        if (x == y) {
                            percent[y][x] = 0;
                        } else {
                            try {
                                percent[y][x] = (double) results.get("e" + steps[x] + ">" + steps[y]);
                            } catch (Throwable t) {
                                percent[y][x] = Double.NaN;
                            }
                        }
                    }
                }
                EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        PixelOverdriveTestResults ui = new PixelOverdriveTestResults(steps, percent, skipTo0And255, methodString, flickeringDetected) {
                            @Override
                            public void onClose() {
                                PixelOverdriveTestStarter.this.onClose();
                            }
                        };
                        Utils.focusWindow(ui);
                        ui.setVisible(true);
                    }
                });
            }

            @Override
            public void onError(Exception e) {
                EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        new ErrorDialog(e) {
                            @Override
                            public void onClose() {
                                PixelOverdriveTestStarter.this.onClose();
                            }
                        };
                    }
                });
            }
        };
        dispose();
        test.begin();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
        onClose();
    }//GEN-LAST:event_formWindowClosing

    public abstract void onClose();

    public static void run(Device d, Runnable doneCallback) {
        if (d == null || !d.isOpen() || !d.hasLightSensor()) {
            new ErrorDialog(new TestException(TestException.INCOMPATIBLE_DEVICE)) {
                @Override
                public void onClose() {
                    doneCallback.run();
                }
            };
            return;
        }
        PixelOverdriveTestStarter ui = new PixelOverdriveTestStarter(d) {
            @Override
            public void onClose() {
                doneCallback.run();
            }
        };
        Utils.focusWindow(ui);
        ui.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
